import datetime
from typing import Annotated
from zoneinfo import ZoneInfo

from fastapi import APIRouter, HTTPException, Path, status

from app.app_settings import get_settings
from app.schema.random_problem import (
    RandomProblemComplete,
    RandomProblemCreate,
    RandomProblemGivenUp,
    RandomProblemResponse,
)

settings = get_settings()
logger = settings.configure_logging()

router = APIRouter()


@router.get(
    "/random-problem/{user_id}",
    responses={
        status.HTTP_404_NOT_FOUND: {
            "description": "User not found",
        },
    },
)
async def get_random_problem(user_id: int) -> list[RandomProblemResponse]:
    logger.info("Fetching random problems for user_id: %s", user_id)
    problems = [
        RandomProblemResponse(
            user_id=user_id,
            random_problem_id=1,
            longitude=135.6917,
            latitude=35.6895,
            created_at=datetime.datetime.now(tz=ZoneInfo("Asia/Tokyo")),
            ended_at=None,
            status="pending",
            image_url=None,
        ),
        RandomProblemResponse(
            user_id=user_id,
            random_problem_id=2,
            longitude=135.3212,
            latitude=34.6937,
            created_at=datetime.datetime.now(tz=ZoneInfo("Asia/Tokyo"))
            - datetime.timedelta(days=365),
            ended_at=datetime.datetime.now(tz=ZoneInfo("Asia/Tokyo")) - datetime.timedelta(days=60),
            status="given_up",
            image_url=None,
        ),
        RandomProblemResponse(
            user_id=user_id,
            random_problem_id=3,
            longitude=135.1917,
            latitude=35.1895,
            created_at=datetime.datetime.now(tz=ZoneInfo("Asia/Tokyo"))
            - datetime.timedelta(days=30),
            ended_at=datetime.datetime.now(tz=ZoneInfo("Asia/Tokyo")) - datetime.timedelta(days=10),
            status="completed",
            image_url="http://example.com/image.jpg",
        ),
    ]
    return problems


@router.post("/random-problem/create", status_code=status.HTTP_201_CREATED)
async def create_random_problem(
    random_problem_create: RandomProblemCreate,
) -> RandomProblemResponse:
    logger.debug("Creating random problem: %s", random_problem_create)
    logger.info("Creating random problem for user_id: %s", random_problem_create.user_id)
    # 以下は仮のデータです。実際にはデータベースに保存する必要があります。
    new_problem = RandomProblemResponse(
        user_id=random_problem_create.user_id,
        random_problem_id=4,  # This would typically be generated by the database
        longitude=random_problem_create.center_longitude,
        latitude=random_problem_create.center_latitude,
        created_at=datetime.datetime.now(tz=ZoneInfo("Asia/Tokyo")),
        ended_at=None,
        status="pending",
        image_url=None,
    )
    return new_problem


@router.patch(
    "/random-problem/complete/{random_problem_id}",
)
async def complete_random_problem(
    random_problem_complete: RandomProblemComplete,
    random_problem_id: Annotated[
        int,
        Path(..., description="ID of the random problem to complete"),
    ],
) -> RandomProblemResponse:
    if random_problem_complete.random_problem_id != random_problem_id:
        raise HTTPException(
            status_code=400,
            detail=(
                "Random problem ID mismatch: "
                f"{random_problem_complete.random_problem_id} != {random_problem_id}"
            ),
        )
    logger.debug("Completing random problem: %s", random_problem_complete)
    logger.info("Completing random problem with ID: %s", random_problem_complete.random_problem_id)
    # 以下は仮のデータです。実際にはデータベースから取得する必要があります。
    completed_problem = RandomProblemResponse(
        user_id=random_problem_complete.user_id,
        random_problem_id=random_problem_complete.random_problem_id,
        longitude=random_problem_complete.user_longitude,
        latitude=random_problem_complete.user_latitude,
        created_at=datetime.datetime(2024, 5, 1, 10, 0, 0, tzinfo=ZoneInfo("Asia/Tokyo")),
        ended_at=datetime.datetime.now(tz=ZoneInfo("Asia/Tokyo")),
        status="completed",
        image_url=random_problem_complete.image_url,
    )
    return completed_problem


@router.patch("/random-problem/given-up/{random_problem_id}")
async def give_up_random_problem(
    random_problem_given_up: RandomProblemGivenUp,
    random_problem_id: Annotated[
        int,
        Path(..., description="ID of the random problem to give up"),
    ],
) -> RandomProblemResponse:
    if random_problem_given_up.random_problem_id != random_problem_id:
        raise HTTPException(
            status_code=400,
            detail=(
                "Random problem ID mismatch: "
                f"{random_problem_given_up.random_problem_id} != {random_problem_id}"
            ),
        )
    logger.debug("Giving up random problem: %s", random_problem_given_up)
    logger.info("Giving up random problem with ID: %s", random_problem_given_up.random_problem_id)
    given_up_problem = RandomProblemResponse(
        user_id=random_problem_given_up.user_id,
        random_problem_id=random_problem_given_up.random_problem_id,
        longitude=135.6917,
        latitude=35.6895,
        created_at=datetime.datetime.now(tz=ZoneInfo("Asia/Tokyo")) - datetime.timedelta(days=30),
        ended_at=datetime.datetime.now(tz=ZoneInfo("Asia/Tokyo")),
        status="given_up",
        image_url=None,
    )
    return given_up_problem
